{"version":3,"sources":["components/index.ts","components/Node.tsx","PathFindingVisualiser/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["components","Node","props","nodeObj","row","col","isStart","isEnd","colourStyle","className","id","createNode","weight","distance","Infinity","PathFindingVisualiser","useState","grid","setGrid","useEffect","initialGrid","currentRow","push","getInitialGrid","onClick","map","rowIndex","node","nodeIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAMeA,EAJI,CACjBC,KCIW,SAACC,GAAkB,IAAD,EACQA,EAAMC,QAAnCC,EADqB,EACrBA,IAAKC,EADgB,EAChBA,IAAKC,EADW,EACXA,QAASC,EADE,EACFA,MAErBC,EAAcF,EAAU,aAAeC,EAAQ,WAAa,GAElE,OAAO,qBAAKE,UAAS,eAAUD,GAAeE,GAAE,eAAUN,EAAV,YAAiBC,OCF7DM,G,MAAa,SAACN,EAAaD,GAC/B,MAAO,CACLC,MACAD,MACAE,QARmB,KAQSD,GATT,KASmCD,EACtDG,MAPiB,KAOOF,GARP,KAQ+BD,EAChDQ,OAAQ,EACRC,SAAUC,OA2CCC,EA3Be,WAAO,IAAD,EACVC,qBADU,mBAC3BC,EAD2B,KACrBC,EADqB,KAOlC,OAJAC,qBAAU,WACR,IAAMC,EAhBa,WAErB,IADA,IAAMH,EAAqB,GAClBb,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAMiB,EAAa,GACVhB,EAAM,EAAGA,EAAM,GAAIA,IAC1BgB,EAAWC,KAAKX,EAAWN,EAAKD,IAElCa,EAAKK,KAAKD,GAEZ,OAAOJ,EAOeM,GACpBL,EAAQE,KACP,IAED,qCACE,8BACE,wBAAQI,QAAS,aAAjB,0BAEF,qBAAKf,UAAU,OAAf,gBACGQ,QADH,IACGA,OADH,EACGA,EAAMQ,KAAI,SAACrB,EAAKsB,GACf,OACE,qBAAKjB,UAAU,MAAf,SACGL,EAAIqB,KAAI,SAACE,EAAMC,GACd,OAAO,cAAC,EAAW3B,KAAZ,CAAiCE,QAASwB,GAApBC,OAFPF,YCpCvBG,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCOSqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.be4e0d96.chunk.js","sourcesContent":["import Node from \"./Node\";\n\nconst components = {\n  Node,\n};\n\nexport default components;\n","import  \"./Node.css\";\nimport TypeNode from \"../types/Node\";\n\ninterface Props {\n  nodeObj: TypeNode;\n}\n\nconst Node = (props: Props) => {\n  const { row, col, isStart, isEnd } = props.nodeObj;\n\n  const colourStyle = isStart ? 'node-start' : isEnd ? 'node-end' : \"\";\n\n  return <div className={`node ${colourStyle}`} id={`node-${row}-${col}`}></div>;\n};\n\nexport default Node;\n","import { useEffect, useState } from \"react\";\nimport TypeNode from \"../types/Node\";\nimport Components from \"../components\";\nimport \"./index.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 10;\nconst END_NODE_ROW = 40;\nconst END_NODE_COL = 40;\n\nconst createNode = (col: number, row: number): TypeNode => {\n  return {\n    col,\n    row,\n    isStart: START_NODE_COL === col && START_NODE_ROW === row,\n    isEnd: END_NODE_COL === col && END_NODE_ROW === row,\n    weight: 1,\n    distance: Infinity,\n  };\n};\n\nconst getInitialGrid = () => {\n  const grid: TypeNode[][] = [];\n  for (let row = 0; row < 50; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst PathFindingVisualiser = () => {\n  const [grid, setGrid] = useState<TypeNode[][]>();\n\n  useEffect(() => {\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n  }, []);\n  return (\n    <>\n      <div>\n        <button onClick={() => {}}>Just do it</button>\n      </div>\n      <div className=\"grid\">\n        {grid?.map((row, rowIndex) => {\n          return (\n            <div className=\"row\" key={rowIndex}>\n              {row.map((node, nodeIndex) => {\n                return <Components.Node key={nodeIndex} nodeObj={node} />;\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default PathFindingVisualiser;\n","import React from \"react\";\nimport \"./App.css\";\nimport PathFindingVisualiser from \"./PathFindingVisualiser\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualiser />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}